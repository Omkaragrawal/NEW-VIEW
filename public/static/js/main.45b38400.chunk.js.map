{"version":3,"sources":["Components/Movies.module.css","Components/Movie.module.css","Components/utils.js","Components/Movie.js","Components/Movies.js","Components/Api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","resources","search","cancel","query","a","axios","CancelToken","source","cancelToken","token","res","result","data","results","isCancel","console","log","message","makeRequestCreator","MovieCard","props","state","getting","item","selected","string","limit","this","poster_path","posterImg","vote_average","title","className","classes","Container","style","backgroundImage","VoteContainer","Vote","Bottom","Title","length","trim","substring","React","Component","Movies","list","cards","map","m","i","Movie","key","ContainerInner","App","val","setState","loading","movies","onChangeHandler","e","target","value","background","border","color","marginTop","borderBottom","paddingBottom","label","onChange","placeholder","renderMovies","Api","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.45b38400.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContainerInner\":\"Movies_ContainerInner__2rZ3g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Movie_Container__12nF-\",\"VoteContainer\":\"Movie_VoteContainer__1N2D5\",\"Bottom\":\"Movie_Bottom__LTSZD\",\"Title\":\"Movie_Title___hNeH\"};","import axios from 'axios'\r\n\r\nexport const truncStr = (string, limit) => {\r\n    return string.length > limit\r\n      ? string\r\n          .trim()\r\n          .substring(0, limit - 3)\r\n          .trim() + \"...\"\r\n      : string;\r\n  };\r\n  \r\n    const resources = {}\r\n    const makeRequestCreator = () =>{\r\n    let cancel;\r\n    \r\n    return async query => {\r\n        if (cancel) {\r\n            //cancelling previous  request before another request\r\n            cancel.cancel();\r\n        }\r\n        //create a new canceToken\r\n        cancel = axios.CancelToken.source();\r\n        try{\r\n            if (resources[query]){\r\n                //Return request if exists\r\n                return resources[query];\r\n            }\r\n            const res = await axios(query , {cancelToken : cancel.token});\r\n            const result = res.data.results;\r\n            //store response \r\n            resources[query] = result\r\n            return result\r\n        }catch(error) {\r\n            if(axios.isCancel(error)){\r\n            //Handle if request is cancelled\r\n            console.log(\"Request is cancelled. \",error.message);\r\n            }else{\r\n                console.log(\"Something went wrong. \",error.message);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport  const  search = makeRequestCreator();","import React from \"react\";\r\nimport classes from \"./Movie.module.css\";\r\nimport {truncStr }from './utils'\r\nclass MovieCard extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      getting : props.item,\r\n      selected : {}\r\n    }\r\n  }\r\n\r\nrender(){\r\n  let data = this.state.getting\r\n  let poster_path = data.poster_path,\r\n    posterImg = \"http://image.tmdb.org/t/p/w185\" + poster_path,\r\n      vote_average = data.vote_average,\r\n      title = data.title;\r\n      if (poster_path == null){\r\n        posterImg =\" https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSols5HZxlQWyS9JY5d3_L9imbk0LiziHiyDtMZLHt_UNzoYUXs2g\"\r\n      }\r\n\r\n\r\n      if(vote_average === 0){\r\n        vote_average = \"\"\r\n      }\r\n  // console.log(this.state.selected)\r\n  return (\r\n    <div \r\n    className={classes.Container}\r\n      style={{\r\n        backgroundImage:\r\n          `url(${posterImg})`,\r\n      }}>\r\n        {console.log(this.state.getting)}\r\n      <div className={classes.VoteContainer}>\r\n        <span className={classes.Vote}>{vote_average}</span>\r\n      </div>\r\n      <div className={classes.Bottom}>\r\n        <h3 className={classes.Title}>{truncStr(title,20)}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n}\r\nexport default MovieCard;\r\n","import React from \"react\";\r\nimport Movie from \"./Movie\";\r\nimport classes from \"./Movies.module.css\";\r\n\r\nfunction Movies ({ list }) {\r\n  let cards = <h1>Loading</h1>;\r\n\r\n  if (list) {\r\n    cards = list.map((m, i) =><div> <Movie key={i} item={m}/></div>);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Container}>\r\n      <div className={classes.ContainerInner}>{cards}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n","import React from \"react\";\r\nimport { search } from \"./utils\";\r\nimport Movies from \"./Movies\";\r\nimport './Style.css'\r\nclass App extends React.Component {\r\n  \r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      movies: null,\r\n      loading: false,\r\n      value: \"\",\r\n      selected  : {}\r\n    };\r\n  }\r\n  \r\n\r\n  search = async val => {\r\n    this.setState({ loading: true });\r\n    const results = await search(\r\n      `https://api.themoviedb.org/3/search/movie?query=${val}&api_key=dbc0a6d62448554c27b6167ef7dabb1b`\r\n    );\r\n    const movies = results;\r\n\r\n    this.setState({ movies, loading: false });\r\n  };\r\n\r\n  onChangeHandler = async e => {\r\n    this.search(e.target.value);\r\n    this.setState({ value: e.target.value });\r\n  };\r\n\r\n  get renderMovies() {\r\n    let movies = \"\";\r\n    if (this.state.movies) {\r\n      // console.log(movies)\r\n      movies = <Movies list={this.state.movies} />;\r\n    }\r\n    return movies;\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"search-bar\">\r\n        <input\r\n        style={{   background : 'transparant',\r\n        border:'none',\r\n        color: 'White ',\r\n        marginTop: '10px',\r\n        borderBottom : '2px solid yellowgreen',\r\n        paddingBottom : '10px'  }}\r\n          label = \"search Bar\"\r\n          onChange={e => this.onChangeHandler(e)}\r\n          placeholder=\"Type something to search\"\r\n        />\r\n         {this.renderMovies}  \r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\n// import App from './Components/Api';\r\n// import Util from './Components/Util';\r\nimport Api from './Components/Api';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Api />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}