{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","Components/Main/Result/ResultForTv.js"],"names":["_objectDestructuringEmpty","obj","TypeError","ResultForTv","id","useState","season","setSeason","useStateValue","dispatch","data","setData","useEffect","a","axios","get","then","res","seasons","request","fetchData","posterImg","poster_path","createdBy","nestedDataToString","created_by","firstairdata","first_air_date","genre","genres","lastairdata","last_air_date","title","last_episode_to_air","name","nexteposide","next_episode_to_air","numberofeposides","number_of_episodes","numberofseasons","number_of_seasons","overview","production","production_companies","vote","vote_average","console","log","className","src","alt","Date","onClick","type","variant","popupId","popupState","Fragment","bindTrigger","bindMenu","map","s","air_date","nestedData","nestedArray","undefined","forEach","item","push","join"],"mappings":"8GAAe,SAASA,EAA0BC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCADvC,mC,2QCYe,SAASC,EAAT,GAA8B,IAAPC,EAAM,EAANA,GAAM,EACdC,mBAAS,IADK,mBACnCC,EADmC,KAC3BC,EAD2B,OAEnBC,cAFmB,yCAE/BC,EAF+B,OAGlBJ,mBAAS,IAHS,mBAGnCK,EAHmC,KAG7BC,EAH6B,KAI1CC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBC,IACnBC,IADmB,cACRX,EAAGA,GADK,+CAEnBY,MAAK,SAACC,GACLN,EAAQM,EAAIP,MACZH,EAAUU,EAAIP,KAAKQ,YALzB,cACQC,EADR,yBAOSA,GAPT,4CADc,uBAAC,WAAD,wBAUdC,KACC,CAAChB,EAAGA,KACP,IAAIiB,EAAS,yCAAqCX,EAAKY,aACrDC,EAAYC,EAAmBd,EAAKe,YACpCC,EAAehB,EAAKiB,eACpBC,EAAQJ,EAAmBd,EAAKmB,QAChCC,EAAcpB,EAAKqB,cAEnBC,GADuBtB,EAAKuB,oBACpBvB,EAAKwB,MACbC,EAAczB,EAAK0B,oBACnBC,EAAmB3B,EAAK4B,mBACxBC,EAAkB7B,EAAK8B,kBACvBC,EAAW/B,EAAK+B,SAChBC,EAAalB,EAAmBd,EAAKiC,sBACrCC,EAAOlC,EAAKmC,aACdC,QAAQC,IAAIzC,GAMZ,OACE,yBAAK0C,UAAU,eACb,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,sBACb,yBAAKC,IAAK5B,EAAW6B,IAAI,KACR,OAAhBf,GAAwBA,EAAcgB,QACrC,yBAAKH,UAAU,eACb,yBAAKA,UAAU,SACb,kBAAC,IAAD,MACA,iDAOR,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,8BACb,4BAAKhB,GACL,kBAAC,IAAD,CACEgB,UAAW,SACXI,QAAS,WAzBnB3C,EAAS,CACP4C,KAAM,kBA2BF,yBAAKL,UAAU,yBACb,2BAAIP,IAEN,yBAAKO,UAAU,iCACb,uBAAGA,UAAU,+BAAb,cACA,uBAAGA,UAAU,0BAA0BzB,GACvC,8BACE,uBAAGyB,UAAU,4BAAb,UAEF,uBAAGA,UAAU,2BAA2BpB,GACxC,uBAAGoB,UAAU,iCAAb,wBAGA,uBAAGA,UAAU,+BAA+BN,IAE9C,yBAAKM,UAAU,8BACb,yBAAKA,UAAU,4BACb,uBAAGA,UAAU,sBAAb,mBACA,uBAAGA,UAAU,uBAAuBX,GAEpC,uBAAGW,UAAU,sBAAb,iBACA,uBAAGA,UAAU,uBAAuBtB,GACpC,uBAAGsB,UAAU,sBAAb,iBACA,uBAAGA,UAAU,uBAAuBT,GACpC,kBAAC,IAAD,CAAYe,QAAQ,UAAUC,QAAQ,oBACnC,SAACC,GAAD,OACC,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,eACET,UAAU,iBACVM,QAAQ,aACJI,sBAAYF,IAHlB,sBAOA,kBAAC,IAASG,mBAASH,GAChBlD,EAAOsD,KAAI,SAACC,GAAD,OACV,kBAAC,IAAD,eAAcA,EAAE3B,KAAhB,gBAA4B2B,EAAEC,qBAQ5C,yBAAKd,UAAU,2BACb,uBAAGA,UAAU,sBAAb,gBACA,uBAAGA,UAAU,uBAAuBJ,EAApC,OACA,uBAAGI,UAAU,sBAAb,qBACA,uBAAGA,UAAU,uBAAuBlB,OAOhD,SAASN,EAAmBuC,GAC1B,IAAIC,EAAc,GASlB,YAPmBC,IAAfF,GACFA,EAAWG,SAAQ,SAAUC,GAC3BH,EAAYI,KAAKD,EAAKjC,SAG1BY,QAAQC,IAAIiB,GACGA,EAAYK,KAAK","file":"static/js/7.973bfed0.chunk.js","sourcesContent":["export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","/* eslint-disable */\nimport React from \"react\";\nimport \"./ResultForTv.css\";\nimport EventIcon from \"@material-ui/icons/Event\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport axios from \"../axios/axios\";\nimport { useState, useEffect } from \"react\";\nimport { useStateValue } from \"../stateProvider\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport PopupState, { bindTrigger, bindMenu } from \"material-ui-popup-state\";\nexport default function ResultForTv({ id }) {\n  const [season, setSeason] = useState([]);\n  const [{}, dispatch] = useStateValue();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios\n        .get(`/tv/${id.id}?&api_key=dbc0a6d62448554c27b6167ef7dabb1b`)\n        .then((res) => {\n          setData(res.data);\n          setSeason(res.data.seasons);\n        });\n      return request;\n    }\n    fetchData();\n  }, [id.id]);\n  let posterImg = `https://image.tmdb.org/t/p/w500${data.poster_path}`,\n    createdBy = nestedDataToString(data.created_by),\n    firstairdata = data.first_air_date,\n    genre = nestedDataToString(data.genres),\n    lastairdata = data.last_air_date,\n    lasteposidetoairdate = data.last_episode_to_air,\n    title = data.name,\n    nexteposide = data.next_episode_to_air,\n    numberofeposides = data.number_of_episodes,\n    numberofseasons = data.number_of_seasons,\n    overview = data.overview,\n    production = nestedDataToString(data.production_companies),\n    vote = data.vote_average;\n  console.log(season);\n  const closeRes = (stat) => {\n    dispatch({\n      type: \"MAKE_NULL\",\n    });\n  };\n  return (\n    <div className=\"resultfortv\">\n      <div className=\"resultfortv__innerspace\">\n        <div className=\"resultfortv__image\">\n          <img src={posterImg} alt=\"\" />\n          {nexteposide !== null && nexteposide > Date() ? (\n            <div className=\"button__div\">\n              <div className=\"event\">\n                <EventIcon />\n                <p>Add to calender</p>\n              </div>\n            </div>\n          ) : (\n            false\n          )}\n        </div>\n        <div className=\"resultfortv__info\">\n          <div className=\"resultfortv__originaltitle\">\n            <h1>{title}</h1>\n            <ArrowBackIcon\n              className={\"button\"}\n              onClick={() => closeRes(true)}\n            />\n          </div>\n          <div className=\"resultfortv__overview\">\n            <p>{overview}</p>\n          </div>\n          <div className=\"resultfortv__genre_production\">\n            <p className=\"resultfortv__createdByTitle\">Created By</p>\n            <p className=\"resultfortv__createdBy\">{createdBy}</p>\n            <span>\n              <p className=\"resultfortv__genre_title\">Genre</p>\n            </span>\n            <p className=\"resultfortv__gernerlist\">{genre}</p>\n            <p className=\"resultfortv__production_title\">\n              Production Companies\n            </p>\n            <p className=\"resultfortv__productionlist\">{production}</p>\n          </div>\n          <div className=\"resultfortv__additonalInfo\">\n            <div className=\"resultfortv__additional1\">\n              <p className=\"resultfortv__title\">Total epposides</p>\n              <p className=\"resultfortv__result\">{numberofeposides}</p>\n\n              <p className=\"resultfortv__title\">First Eposide</p>\n              <p className=\"resultfortv__result\">{firstairdata}</p>\n              <p className=\"resultfortv__title\">Total seasons</p>\n              <p className=\"resultfortv__result\">{numberofseasons}</p>\n              <PopupState variant=\"popover\" popupId=\"demo-popup-menu\">\n                {(popupState) => (\n                  <React.Fragment>\n                    <Button\n                      className=\"season__button\"\n                      variant=\"contained\"\n                      {...bindTrigger(popupState)}\n                    >\n                      Click here to view\n                    </Button>\n                    <Menu {...bindMenu(popupState)}>\n                      {season.map((s) => (\n                        <MenuItem>{`${s.name}     ${s.air_date}`}</MenuItem>\n                      ))}\n                    </Menu>\n                  </React.Fragment>\n                )}\n              </PopupState>\n            </div>\n          </div>\n          <div className=\"resutfortv__additional2\">\n            <p className=\"resultfortv__title\">Vote average</p>\n            <p className=\"resultfortv__result\">{vote}/10</p>\n            <p className=\"resultfortv__title\">Last Eposide date</p>\n            <p className=\"resultfortv__result\">{lastairdata}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nfunction nestedDataToString(nestedData) {\n  let nestedArray = [],\n    resultString;\n  if (nestedData !== undefined) {\n    nestedData.forEach(function (item) {\n      nestedArray.push(item.name);\n    });\n  }\n  console.log(nestedArray);\n  resultString = nestedArray.join(\", \"); // array to string\n  return resultString;\n}\n"],"sourceRoot":""}