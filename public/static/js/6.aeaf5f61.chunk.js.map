{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","Components/Main/Components/Row/Row.js"],"names":["_objectDestructuringEmpty","obj","TypeError","Row","title","urls","useStateValue","dispatch","useState","movies","setMovies","useEffect","a","axios","get","request","data","results","fetchData","className","key","map","movie","str","original_name","n","length","substr","text","vote_average","undefined","value","maxValue","background","styles","root","fill","fontSize","id","src","poster_path","alt","onClick","type","item","sendMovie","variant","popupId","popupState","Fragment","bindTrigger","bindMenu","console","log"],"mappings":"8GAAe,SAASA,EAA0BC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCADvC,mC,oQCce,SAASC,EAAT,GAA+B,IAAhBC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KAAQ,EACpBC,cADoB,yCAChCC,EADgC,OAEfC,mBAAS,IAFM,mBAEpCC,EAFoC,KAE5BC,EAF4B,KAO3CC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBC,IAAMC,IAAIT,GADlC,cACQU,EADR,OAEEL,EAAUK,EAAQC,KAAKC,SAFzB,kBAGSF,GAHT,4CADc,uBAAC,WAAD,wBAMdG,KACC,CAACb,IAkBJ,OACE,yBAAKc,UAAU,MAAMC,IAAKhB,GACxB,4BAAKA,GACL,yBAAKe,UAAU,gBACZV,EAAOY,KAAI,SAACC,GAAD,OACV,yBAAKH,UAAU,cACb,6BACE,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,kBAxBVI,EAyBQD,EAAME,cAzBTC,EAyBwB,IAxBnC,OAAHF,QAAG,IAAHA,OAAA,EAAAA,EAAKG,QAASD,EAAIF,EAAII,OAAO,EAAGF,EAAI,GAAK,MAAQF,KA2B9C,6BACE,kBAAC,IAAD,CACEJ,UAAU,SACVS,KACyB,OAAvBN,EAAMO,mBACiBC,IAAvBR,EAAMO,aACFP,EAAMO,aACN,MAENE,MAAOT,EAAMO,aACbG,SAAU,KACVC,YAAU,EACVC,OAAQ,CAENC,KAAM,GAGNP,KAAM,CAEJQ,KAAM,SAENC,SAAU,QAIZJ,WAAY,CACVG,KAAM,YAGVhB,IAAKE,EAAMgB,MAGf,kBAAC,gBAAD,CACEnB,UAAU,cACVoB,IACwB,OAAtBjB,EAAMkB,YAAN,UA5EE,wCA4EF,OACmBlB,EAAMkB,aADzB,UA1Ed,8GA8EYC,IAAI,GACJC,QAAS,kBA/DL,SAACJ,EAAIlC,GACrBG,EAAS,CACPoC,KAAM,YACNC,KAAM,CACJN,KACAlC,QACAuC,KAAM,QAyDiBE,CAAUvB,EAAMgB,GAAIhB,EAAME,gBACzCJ,IAAKE,EAAMgB,MAGf,kBAAC,IAAD,CAAYQ,QAAQ,UAAUC,QAAQ,oBACnC,SAACC,GAAD,OACC,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,eACE9B,UAAU,aACV2B,QAAQ,aACJI,sBAAYF,IAHlB,OAOA,kBAAC,IAASG,mBAASH,GACjB,kBAAC,IAAD,CAAUN,QAAS,kBAAMU,QAAQC,IAAI/B,EAAMgB,MAA3C,QAGA,kBAAC,IAAD,CAAUI,QAAS,kBAAMU,QAAQC,IAAI/B,EAAMgB,MAA3C,mBAtFD,IAACf,EAAKE","file":"static/js/6.aeaf5f61.chunk.js","sourcesContent":["export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","/* eslint-disable */\nimport React from \"react\";\nimport \"./Row.css\";\nimport { CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\nimport axios from \"../../axios/axios\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport PopupState, { bindTrigger, bindMenu } from \"material-ui-popup-state\";\nimport { useEffect, useState } from \"react\";\nimport { useStateValue } from \"../../stateProvider.js\";\n\nexport default function Row({ title, urls }) {\n  const [{}, dispatch] = useStateValue();\n  const [movies, setMovies] = useState([]);\n  const posterIMG = \"https://image.tmdb.org/t/p/original/\";\n  const img =\n    \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSols5HZxlQWyS9JY5d3_L9imbk0LiziHiyDtMZLHt_UNzoYUXs2g\";\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(urls);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [urls]);\n\n  const truncate = (str, n) => {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  };\n\n  //sending data using context api\n  const sendMovie = (id, title) => {\n    dispatch({\n      type: \"ADD_MOVIE\",\n      item: {\n        id,\n        title,\n        type: \"tv\",\n      },\n    });\n  };\n\n  return (\n    <div className=\"row\" key={title}>\n      <h3>{title}</h3>\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <div className=\"row__space\">\n            <div>\n              <div className=\"poster__titleSpace\">\n                <h3 className=\"poster__title\">\n                  {truncate(movie.original_name, 20)}\n                </h3>\n              </div>\n              <div>\n                <CircularProgressbar\n                  className=\"radius\"\n                  text={\n                    movie.vote_average !== null ||\n                    movie.vote_average !== undefined\n                      ? movie.vote_average\n                      : \"-^-\"\n                  }\n                  value={movie.vote_average}\n                  maxValue={\"10\"}\n                  background\n                  styles={{\n                    // Customize the root svg element\n                    root: {},\n\n                    // Customize the text\n                    text: {\n                      // Text color\n                      fill: \"#10101\",\n                      // Text size\n                      fontSize: \"42px\",\n                    },\n\n                    // Customize background - only used when the `background` prop is true\n                    background: {\n                      fill: \"#111111\",\n                    },\n                  }}\n                  key={movie.id}\n                />\n              </div>\n              <LazyLoadImage\n                className=\"row__poster\"\n                src={\n                  movie.poster_path !== null\n                    ? `${posterIMG}${movie.poster_path}`\n                    : `${img}`\n                }\n                alt=\"\"\n                onClick={() => sendMovie(movie.id, movie.original_name)}\n                key={movie.id}\n              />\n            </div>\n            <PopupState variant=\"popover\" popupId=\"demo-popup-menu\">\n              {(popupState) => (\n                <React.Fragment>\n                  <Button\n                    className=\"more__vert\"\n                    variant=\"contained\"\n                    {...bindTrigger(popupState)}\n                  >\n                    ...\n                  </Button>\n                  <Menu {...bindMenu(popupState)}>\n                    <MenuItem onClick={() => console.log(movie.id)}>\n                      Like\n                    </MenuItem>\n                    <MenuItem onClick={() => console.log(movie.id)}>\n                      Favoutire\n                    </MenuItem>\n                  </Menu>\n                </React.Fragment>\n              )}\n            </PopupState>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}